package EulerProject;

import org.w3c.dom.ls.LSOutput;

import javax.crypto.spec.PSource;
import java.util.ArrayList;
import java.util.List;

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 find the sum of the even-valued terms.
 */
public class Problem2 {
    public static void main(String[] args) {

        int firstNumber=0;
        int secondNumber=1;
        int sum=0;
        int result=0;
        ArrayList<Integer> mylist = new ArrayList<Integer>();
        while (sum<=4000000) {
            sum = firstNumber + secondNumber;//1,2,3,5,8
            firstNumber = secondNumber;//1,2,2,3
            secondNumber = sum;//0,2,3,5
            if(sum%2==0){
                mylist.add(sum);
            }

        }
        System.out.println(mylist );
        for(int i:mylist){
            result += i;
        }
        System.out.println(result);
    }
}
